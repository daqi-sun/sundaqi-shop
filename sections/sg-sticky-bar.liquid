<style>
  .sg-sticky__section-{{ section.id }} {

    background: {{ section.settings.background_color }};
  }
</style>
<div class="sticky-placeholder"></div>
<div class="sg-sticky__section sg-sticky__section-{{ section.id }}">
  <div class="sg-sticky__wrapper container--wide">
    <ul class="sg-sticky__block-container">
      {% for block in section.blocks %}
        <a
          class="sg-sticky__block {% if forloop.index == 1 %} active {% endif %}"
          href="#_{{ block.settings.title | downcase | remove: ' ' | replace: '&', '-' }}"
          data-target="_{{ block.settings.title | downcase | remove: ' ' | replace: '&', '-' }}"
        >
          <li
            title="{{ block.settings.title }}"
          >
            <span>{{ block.settings.title }}</span>
          </li>
        </a>
      {% endfor %}
    </ul>
  </div>
</div>

<script>
  const targetSection = document.querySelector('.sg-sticky__section');
  let targetSectionPosition;
  let placeholder = document.querySelector('.sticky-placeholder');
  const anchors = document.querySelectorAll('.sg-sticky__block-container a');

  anchors.forEach((anchor) => {
    anchor.addEventListener('click', function (event) {
      event.preventDefault();
      anchors.forEach((a) => {
        a.classList.remove('active');
      });
      this.classList.add('active');
      const targetDataId = this.getAttribute('data-target');
      const targetSection = document.querySelector(`[data-id="${targetDataId}"]`);
      if (targetSection) {
        targetSection.scrollIntoView({
          behavior: 'smooth',
        });
      }
    });
  });

  function updateStickySection() {
    targetSectionPosition = placeholder.getBoundingClientRect().top + window.pageYOffset;
    handleScroll();
  }

  function handleScroll() {
    const scrollPosition = window.pageYOffset;
    const totalHeight = targetSectionPosition;
    if (scrollPosition > totalHeight) {
      placeholder.style.height = `${targetSection.offsetHeight}px`;
      targetSection.classList.add('sticky');
    } else {
      placeholder.style.height = '0';
      targetSection.classList.remove('sticky');
    }
  }

  function handleIntersection(entries) {
    entries.forEach((entry) => {
      const targetDataId = entry.target.getAttribute('data-id');
      const correspondingAnchor = document.querySelector(
        `.sg-sticky__block-container a[data-target="${targetDataId}"]`
      );

      if (entry.isIntersecting) {
        anchors.forEach((anchor) => anchor.classList.remove('active'));

        if (correspondingAnchor) {
          correspondingAnchor.classList.add('active');
        }
      }
    });
  }

  const observer = new IntersectionObserver(handleIntersection, { threshold: 0.3 });
  const sections = document.querySelectorAll('.section');
  sections.forEach((section) => {
    observer.observe(section);
  });

  window.addEventListener('resize', updateStickySection);
  window.addEventListener('scroll', handleScroll);

  document.addEventListener('DOMContentLoaded', () => {
    placeholder = document.querySelector('.sticky-placeholder');
    updateStickySection();
    anchors.forEach((anchor) => {
      const targetDataId = anchor.getAttribute('data-target');
      const section = document.querySelectorAll(`[data-id="${targetDataId}"]`);
      section.forEach((s) => {
        observer.observe(s);
      });
    });
  });
</script>

{% schema %}
{
  "name": "SG Sticky",
  "class": "sg-sticky-section",
  "settings": [
    {
      "type": "color",
      "id": "background_color",
      "label": "Background Color"
    }
  ],
  "blocks": [
    {
      "type": "sticky",
      "name": "Sticky Bar",
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Tab Title",
          "default": "DELTA Series"
        }
      ]
    }
  ]
}
{% endschema %}
