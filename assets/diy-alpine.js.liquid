// Define global Alpine data and functions
document.addEventListener('alpine:init', () => {
  Alpine.data('BundleData', () => ({
    // TODO: Remove comment below
    selectedTab: document.querySelector('[data-diy-purchase-default-tab]') ? document.querySelector('[data-diy-purchase-default-tab]').getAttribute('data-diy-purchase-default-tab') : '', // bundle, customize
    // selectedTab: 'customize', // bundle, customize
    jsonCustomizeData: [],
    jsonBundleData: [],
    dataInitialize: false,
    selectedOptions: {}, // Track selected options
    selectedOptionsMandatory: {}, // Save selected options that is_mandatory == true
    selectedOptionsMandatoryLength: 0,
    customizeMandatoryLength: 0,
    bundleMandatoryLength: 0,
    totalPrice: '',
    totalCompareAtPrice: '',
    totalDiscountedPrice: '',
    isMandatoryOptionChecked: false, // Initialize the flag to false
    sliderImages: [], // Initialize as empty array, used to render the initial slider content only, use with insertInitialSliderImages function
    customizeImages: [ // Initialize as empty array, used to render the changable overlay image in customize tab
      // Format as below:
      // {
      //   title: data.title,
      //   image_url: data.default_customize_image_url,
      //   order: data.customize_image_order
      // }
    ],
    diyPageTitle: '',
    diyPageBadgeLabel: '',
    // Add more data properties as needed

    formatMoney(cents, format) {
      var moneyFormat = '${{amount}}'; // eslint-disable-line camelcase

      if (typeof cents === 'string') {
        cents = cents.replace('.', '');
      }
      var value = '';
      var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
      var formatString = format || moneyFormat;

      function formatWithDelimiters(number, precision, thousands, decimal) {
        thousands = thousands || ',';
        decimal = decimal || '.';

        if (isNaN(number) || number === null) {
          return 0;
        }

        number = (number / 100.0).toFixed(precision);

        var parts = number.split('.');
        var dollarsAmount = parts[0].replace(
          /(\d)(?=(\d\d\d)+(?!\d))/g,
          '$1' + thousands
        );
        var centsAmount = parts[1] ? decimal + parts[1] : '';

        return dollarsAmount + centsAmount;
      }

      switch (formatString.match(placeholderRegex)[1]) {
        case 'amount':
          value = formatWithDelimiters(cents, 2);
          break;
        case 'amount_no_decimals':
          value = formatWithDelimiters(cents, 0);
          break;
        case 'amount_with_comma_separator':
          value = formatWithDelimiters(cents, 2, '.', ',');
          break;
        case 'amount_no_decimals_with_comma_separator':
          value = formatWithDelimiters(cents, 0, '.', ',');
          break;
        case 'amount_no_decimals_with_space_separator':
          value = formatWithDelimiters(cents, 0, ' ');
          break;
        case 'amount_with_apostrophe_separator':
          value = formatWithDelimiters(cents, 2, "'");
          break;
      }

      return formatString.replace(placeholderRegex, value);
    },

    priceFormat(price) {
      const priceFormat = theme.priceCurrencyCodeEnable ? theme.moneyFormatWithCurrency : theme.moneyFormat;
      let formattedPrice;
      if(price > 999900){ formattedPrice = theme.Currency.formatMoney(price, priceFormat).replace(',00', '').replace('.', ' '); }
      else{ formattedPrice = theme.Currency.formatMoney(price, priceFormat).replace(',00', '').replace('.', ''); }
      return formattedPrice;
    },

    // Extracts product and variant IDs from the given option.
    extractProductAndVariantIds: function(option) {
      const idsFromVariantId = this.extractIdsFromUrl(option.variant_id);

      return {
        productId: idsFromVariantId.productId,
        variantId: idsFromVariantId.variantId
      };
    },

    updateOptionWithVariantData: async function(productId, variantId, option) {
      const data = await this.getVariantData(productId, variantId);
      option.price = data.variantPrice;
      option.compare_at_price = data.variantCompareAtPrice;
    },

    // Extracts product and variant IDs from the given option and updates the option with variant data.
    updateOptionData: async function(option) {
      let ids = this.extractProductAndVariantIds(option);
      await this.updateOptionWithVariantData(ids.productId, ids.variantId, option);
    },

    async fetchCustomizeData() {
      try {
        const response = await fetch(`{{ 'diy.customize.json' | asset_url }}`);
        const data = await response.json();

        // Get all option block that has is_mandatory == true in jsonCustomizeData
        const customizeMandatoryOptionBlocks = data.option_blocks.filter((optionBlock) => optionBlock.is_mandatory);
        this.customizeMandatoryLength = customizeMandatoryOptionBlocks.length

        // Process your JSON data here
        data.option_blocks.forEach((optionBlock) => {
          optionBlock.options.forEach((option) => {
            if(option.option_type == 'single' || option.option_type == 'single with quantity selector') {
              this.updateOptionData(option);
            }

            if(option.option_type == 'bundle' || option.option_type == 'bundle with accessory') {
              option.bundle && option.bundle.forEach((option) => {
                this.updateOptionData(option);
              });
              option.accessories && option.accessories.forEach((option) => {
                // check if no option_type object exists or option_type is not "no thanks" to avoid error checking ID
                // co'z "no thanks" has no variant_id
                if(!option.option_type || option.option_type != 'no thanks' && option.option_type != 'no thanks - accessories') {
                  this.updateOptionData(option);
                }
              });
            }
          });
        });

        // Return the processed data
        return data;
      } catch (error) {
        console.error('Error fetching JSON data:', error);
        throw error;
      }
    },

    async fetchBundleData() {
      try {
        const response = await fetch(`{{ 'diy.bundle.json' | asset_url }}`);
        const data = await response.json();

        // Replace empty slider images with Wählen Sie Ihre Lösung images
        // TODO: Make it dynamic to recognize the initially selected option
        this.sliderImages = data.option_blocks[0].options[0].slider_images;

        // Get all option block that has is_mandatory == true in jsonBundleData
        const bundleMandatoryOptionBlocks = data.option_blocks.filter((optionBlock) => optionBlock.is_mandatory);
        this.bundleMandatoryLength = bundleMandatoryOptionBlocks.length

        // Process your JSON data here
        data.option_blocks.forEach((optionBlock) => {
          optionBlock.options.forEach((option) => {

            if(option.option_type == 'single' || option.option_type == 'single with quantity selector') {
              this.updateOptionData(option);
            }

            if(option.option_type == 'bundle' || option.option_type == 'bundle with accessory') {
              option.bundle && option.bundle.forEach((option) => {
                this.updateOptionData(option);
              });
              option.accessories && option.accessories.forEach((option) => {
                // check if no option_type object exists or option_type is not "no thanks" to avoid error checking ID
                // co'z "no thanks" has no variant_id
                if(!option.option_type || option.option_type != 'no thanks' && option.option_type != 'no thanks - accessories') {
                  this.updateOptionData(option);
                }
              });
            }

          });
        });

        // Return the processed data
        return data;
      } catch (error) {
        console.error('Error fetching JSON data:', error);
        throw error;
      }
    },

    // Change the selected tab
    changeTab(tab) {
      this.selectedTab = tab;

      // reset the form when switching tab
      this.resetForm(tab);

      // when tab == bundle preselect the first isAccordionOpen
      if(tab == 'bundle') {
        // click first diy-purchase__accordion-button
        const firstAccordionButton = document.querySelector('#tab-bundle .diy-purchase__accordion-button');

        // if firstAccordionButton and firstAccordionButton is not active
        if(firstAccordionButton && !firstAccordionButton.classList.contains('diy-purchase__accordion-item--active')) {
          // click first diy-purchase__accordion-button
          firstAccordionButton.click();
        }
      }

    },

    // Reset the form
    resetForm(param) {
      // reset errormessage
      const diyBlockErrorMessage = document.querySelectorAll('.diy-purchase__error-message');
      diyBlockErrorMessage.forEach((errorMessage) => {
        errorMessage.classList.add('hide');
      });

      // Reset the selected options
      this.selectedOptions = {};

      // Reset the selectedOptionsMandatory
      this.selectedOptionsMandatory = {};

      if(param == 'customize') {
        // Reset the slider images
        this.sliderImages = [];

        // Reset the bundle tab
        this.jsonBundleData.forEach((optionBlock) => {
          const properties = [
            'selectedOptionPrice',
            'selectedOptionCompareAtPrice',
            'accesoriesSelectedOptionPrice',
            'accesoriesSelectedOptionCompareAtPrice',
          ];

          properties.forEach((property) => {
            optionBlock[property] = '';
          });

          optionBlock.options.forEach((option) => {
            option.isAccordionOpen = false;
          });
        });

      }

      if(param == 'bundle') {
        // Reset customizeImages
        this.customizeImages = [];

        // Reset the customize tab
        this.jsonCustomizeData.forEach((optionBlock) => {
          const properties = [
            'selectedOptionPrice',
            'selectedOptionCompareAtPrice',
            'accesoriesSelectedOptionPrice',
            'accesoriesSelectedOptionCompareAtPrice',
          ];

          properties.forEach((property) => {
            optionBlock[property] = '';
          });

          optionBlock.options.forEach((option) => {
            option.isAccordionOpen = false;
          });
        });
      }

      // Reset the totalPrice
      this.totalPrice = '';

      // Reset the totalCompareAtPrice
      this.totalCompareAtPrice = '';

      // Reset the totalDiscountedPrice
      this.totalDiscountedPrice = '';

      // Reset the isMandatoryOptionChecked flag
      this.isMandatoryOptionChecked = false;

      // close all active accordion
      const activeAccordions = document.querySelectorAll('.diy-purchase__accordion-item--active');
      activeAccordions.forEach((accordion) => {
        accordion.classList.remove('diy-purchase__accordion-item--active');
      });

      // uncheck all diy-purchase__option options
      const allOptions = document.querySelectorAll('.form-tab .diy-purchase__option input[type="radio"]');
      allOptions.forEach((option) => {
        option.checked = false;
      });

    },

    // Normalize to lowercase after trimming whitespace
    normalizedOptionType(optionType) {
      return optionType.trim().toLowerCase();
    },

    // Extract product and variant IDs from the URL
    extractIdsFromUrl(url) {
      if (typeof url !== 'string') {
        console.error('Invalid URL:', url);
        return null;
      }

      const regex = /\/products\/(\d+)\/variants\/(\d+)/;
      const match = url.match(regex);
      if (match) {
        return {
          productId: match[1],
          variantId: match[2],
        };
      }
      return null;
    },

    // Convert text to a slug
    convertToSlug(text) {
      return text.toLowerCase().replace(/ /g, '-').replace(/(\(|\)|\.)/g, '');
    },

    base64Encode(str) {
      return btoa(str);
    },

    async getProductById(productId) {
      const shopName = 'ecoflow-es';
      const apiVersion = '2024-04';
      const accessToken = 'd8e7d4110af57c3c907b4d0b0a4218e1';

      // Construct the GraphQL query
      const graphqlQuery = `
      {
        product(id: "gid://shopify/Product/${productId}") {
          title
          variants(first: 50) {
            edges {
              node {
                id
                title
                quantityAvailable
                price {
                  amount
                  currencyCode
                }
                compareAtPrice {
                  amount
                  currencyCode
                }
              }
            }
          }
        }
      }
      `;

      try {
        const response = await fetch(`https://${shopName}.myshopify.com/api/${apiVersion}/graphql.json`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-Shopify-Storefront-Access-Token': accessToken,
          },
          body: JSON.stringify({ query: graphqlQuery }),
        });

        if (!response.ok) {
          throw new Error('Failed to fetch product');
        }

        const data = await response.json();

        // Extract product data from the response
        const productData = data.data.product;

        return productData; // You can return the product data if needed
      } catch (error) {
        console.error('Error:', error);
        throw error;
      }
    },

    async getVariantData(productId, variantId) {
      let variantDataId = '';
      let variantPrice = 0;
      let variantCompareAtPrice = 0;
      let variantQuantityAvailable = 0;
      try {
        const productData = await this.getProductById(productId);
        productData && productData.variants.edges.forEach((variant) => {

          // grab only the id on this string gid://shopify/ProductVariant/46686640243023
          let thisVariantId = variant.node.id.split('/').pop();
          // match variant id then get its price
          if (thisVariantId == variantId) {
            variantDataId = thisVariantId;
            variantPrice = variant.node.price.amount;
            variantCompareAtPrice = variant.node.compareAtPrice.amount;
            variantQuantityAvailable = variant.node.quantityAvailable;
          }
        });
        return {
          variantDataId,
          variantPrice,
          variantCompareAtPrice,
          variantQuantityAvailable,
        };
      } catch (error) {
        console.error('Error:', error);
        // Handle errors here if needed
        return variantPrice; // or some default value
      }
    },

    hideOptionBlocksErrorMessage(thisOptionTitle) {
      let el = document.querySelector(`.form-tab--active [name="${this.convertToSlug(thisOptionTitle)}"]`)
      let errorMessage = el.closest('.diy-purchase__form-group').querySelector('.diy-purchase__error-message');
      if (errorMessage) errorMessage.classList.add('hide');
    },

    showOptionBlocksErrorMessage() {

      // check all data-required attribute then check if there is at least one input checked
      let requiredBlocks = document.querySelectorAll('.form-tab--active [data-required]');

      requiredBlocks && requiredBlocks.forEach((requiredBlock) => {
        if(!requiredBlock.querySelector('input[type="radio"]:checked')) {
          const diyBlockErrorMessage = requiredBlock.querySelector('.diy-purchase__error-message');
          diyBlockErrorMessage.classList.remove('hide');

          // Scroll to error message (show it in the middle of screen)
          let firstDiyBlockErrorMessage = document.querySelector('.form-tab--active .diy-purchase__error-message:not(.hide)');
          let elementRect = firstDiyBlockErrorMessage.getBoundingClientRect();
          let offset = window.innerHeight / 2 - elementRect.height / 2;
          let top = elementRect.top + window.pageYOffset - offset;

          // Check if the error message is already in the middle of the screen
          window.scrollTo({
            top: top,
            behavior: "smooth"
          });

          // shake the notification message when it appears
          if (diyBlockErrorMessage.classList.contains('shake')) diyBlockErrorMessage.classList.remove('shake');
          setTimeout(() => {
            diyBlockErrorMessage.classList.add('shake');
          }, 250);
        } else {
          const diyBlockErrorMessage = requiredBlock.querySelector('.diy-purchase__error-message');
          if (diyBlockErrorMessage.classList.contains('shake')) diyBlockErrorMessage.classList.remove('shake');
          diyBlockErrorMessage.classList.add('hide');
        }
      });

    },

    addToCart() {

      if(!this.isMandatoryOptionChecked) {

        this.showOptionBlocksErrorMessage();

      } else {

        const selectedVariantItems = { items: [] }
        const checkoutButtonText = document.querySelectorAll('.diy-footer__buttons .btn__text');
        const checkoutButtonLoader = document.querySelectorAll('.diy-footer__buttons [data-loader]');

        checkoutButtonText.forEach((text) => text.classList.add('btn__text--visually-hidden'));
        checkoutButtonLoader.forEach((loader) => loader.classList.remove('hide'));

        // Push selected options to selectedVariantItems quantity and variant_id
        Object.values(this.selectedOptions).forEach((selectedOption) => {
          const variantId = selectedOption[`variant_id`];
          const selectedOptionId = Number(variantId);

          selectedVariantItems.items.push({
            quantity: Number(selectedOption.quantity),
            id: selectedOptionId,
          });
        });

        // Disable checkout button
        this.isMandatoryOptionChecked = false;

        fetch('/cart/add.js', {
          method: 'POST',
          credentials: 'same-origin',
          headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
          },
          body: JSON.stringify(selectedVariantItems),
        })
        .then(response => {
          // Redirect to checkout page
          // window.location.href = '/checkout';

          // open cart drawer
          theme.Cart.prototype._onProductAdded();

          // reset checkout/ATC button
          checkoutButtonText.forEach((text) => text.classList.remove('btn__text--visually-hidden'));
          checkoutButtonLoader.forEach((loader) => loader.classList.add('hide'));

          // Enable checkout button
          this.isMandatoryOptionChecked = true;

          // reset selectedVariantItems
          selectedVariantItems.items = [];

        })
        .catch((error) => {
          console.error('Error:', error);
        });
      }

    },

    async initializeData() {
      try {
        const [customizeData, bundleData] = await Promise.all([
          this.fetchCustomizeData(),
          this.fetchBundleData(),
        ]);

        // Process both initial and updated data here
        this.jsonCustomizeData = customizeData.option_blocks;
        this.jsonBundleData = bundleData.option_blocks;

        // Set dataInitialize to true when both async operations are complete
        this.dataInitialize = true;

        setTimeout(() => {
          if (this.selectedTab == 'bundle') {
            // click first diy-purchase__accordion-button
            const firstAccordionButton = document.querySelector('#tab-bundle .diy-purchase__accordion-button');

            // if firstAccordionButton and firstAccordionButton is not active
            if(firstAccordionButton && !firstAccordionButton.classList.contains('diy-purchase__accordion-item--active')) {
              // click first diy-purchase__accordion-button
              firstAccordionButton.click();
            }
          }

          this.dataInfos();

        }, 2000);

      } catch (error) {
        console.error('Error initializing data:', error);
      }
    },

    checkIsMandatory() {
      // Create a new object where each key is a unique title
      const uniqueTitles = {};
      for (const key in this.selectedOptionsMandatory) {
        const title = key.split(' ')[0]; // Adjust this line to extract the title as needed
        uniqueTitles[title] = this.selectedOptionsMandatory[key];
      }

      // Use the length of uniqueTitles to check if all mandatory options are selected
      this.selectedOptionsMandatoryLength = Object.keys(uniqueTitles).length;

      // update isMandatoryOptionChecked flag
      if(this.selectedTab == 'customize') {
        if(this.selectedOptionsMandatoryLength == this.customizeMandatoryLength) {
          this.isMandatoryOptionChecked = true;
        } else {
          this.isMandatoryOptionChecked = false;
        }
      }

      // update isMandatoryOptionChecked flag
      if(this.selectedTab == 'bundle') {
        if(this.selectedOptionsMandatoryLength == this.bundleMandatoryLength) {
          this.isMandatoryOptionChecked = true;
        } else {
          this.isMandatoryOptionChecked = false;
        }
      }
    },

    updateGrandTotal() {
      // Calculate the totalPrice based on selected options
      this.totalPrice = Object.values(this.selectedOptions)
        .reduce((total, selectedOption) => total + (parseFloat(selectedOption[`price`]) * selectedOption.quantity), 0)
        .toFixed(2); // Format the totalPrice to two decimal places

      // Calculate the totalCompareAtPrice based on selected options
      this.totalCompareAtPrice = Object.values(this.selectedOptions)
        .reduce((total, selectedOption) => total + (parseFloat(selectedOption[`compare_at_price`]) * selectedOption.quantity), 0)
        .toFixed(2); // Format the totalCompareAtPrice to two decimal places

      // Calculate the totalDiscountedPrice based on selected options
      this.totalDiscountedPrice = (this.totalCompareAtPrice - this.totalPrice).toFixed(2);
    },

    // remove the selected option
    removeSelectedOption(optionBlock, option) {
      // Copy the existing selectedOptions object
      const updatedSelectedOptions = { ...this.selectedOptions };

      if(option && (option.option_type == 'bundle' || option.option_type == 'bundle with accessory')) {
        option.bundle && option.bundle.map((bundle, index) => {
          let bundleTitle = optionBlock.title + index + ' ' + bundle.title;
          if (updatedSelectedOptions.hasOwnProperty(bundleTitle)) {
            // Remove the bundle by deleting the property
            delete updatedSelectedOptions[bundleTitle];
          }
        });

        // reset the prices
        optionBlock.selectedOptionPrice = '';
        optionBlock.selectedOptionCompareAtPrice = '';

        // Uncheck all accessories if the option has any
        if (option.accessories && option.accessories.length > 0) {
          const accessoryInputs = document.querySelectorAll(`[name="${'accessories-' + this.convertToSlug(optionBlock.title)}"]`);
          accessoryInputs.forEach(input => {
            input.checked = false;
          });

          delete updatedSelectedOptions[optionBlock.title];

          // reset the accessories prices
          optionBlock.accesoriesSelectedOptionPrice = '';
          optionBlock.accesoriesSelectedOptionCompareAtPrice = '';

        }
      } else {
        // Remove the selected option by deleting the property
        delete updatedSelectedOptions[optionBlock.title];

        // if option type has 'accessories' string
        if(option.option_type.includes('accessories')) {
          // reset the accessories prices
          optionBlock.accesoriesSelectedOptionPrice = '';
          optionBlock.accesoriesSelectedOptionCompareAtPrice = '';
        } else {
          // reset the prices
          optionBlock.selectedOptionPrice = '';
          optionBlock.selectedOptionCompareAtPrice = '';
        }

      }

      // Remove the mandatory option from selectedOptionsMandatory
      const selectedOptionsMandatoryTitle = option ? optionBlock.title + option.title : optionBlock.title;
      if(optionBlock.is_mandatory) delete this.selectedOptionsMandatory[selectedOptionsMandatoryTitle]

      // Update the selectedOptions with the removed optionBlock
      this.selectedOptions = updatedSelectedOptions;

      this.updateGrandTotal();
      this.checkIsMandatory();

    },

    getAllMandatoryOptionBlocks(optionBlock, option) {
      const selectedOptionsMandatoryTitle = option ? optionBlock.title + option.title : optionBlock.title;
      if(optionBlock && optionBlock.is_mandatory) {
        this.selectedOptionsMandatory[selectedOptionsMandatoryTitle] = {
          is_mandatory: optionBlock.is_mandatory,
        };
      }
    },

    // Method to update the price based on the selected option
    updatePrice(option, optionBlock, qty = 1) {

      // let thisOption = document.querySelector(`.form-tab--active [name="${this.convertToSlug(optionBlock.title)}"]`);
      let thisOptionTitle = optionBlock.title;

      // Get all the mandatory option blocks
      this.getAllMandatoryOptionBlocks(optionBlock, option)

      if(option) {
        if(option.option_type == 'bundle' || option.option_type == 'bundle with accessory') {
          option.bundle && option.bundle.map((bundle, index) => {
            this.selectedOptions[optionBlock.title + index + ' ' + bundle.title] = {
              title: bundle.title,
              price: bundle.price,
              compare_at_price: bundle.compare_at_price,
              variant_id: this.extractIdsFromUrl(bundle.variant_id).variantId,
              quantity: qty,
            };
          });

          let optionPrice = this.computeBundlePrice(option.bundle, qty).totalPrice
          let optionCompareAtPrice = this.computeBundlePrice(option.bundle, qty).totalCompareAtPrice

          // Update the 'selectedOptionPrice' for this option block
          optionBlock.selectedOptionPrice = Number(optionPrice).toFixed(2); // Format the price to two decimal places
          optionBlock.selectedOptionCompareAtPrice = Number(optionCompareAtPrice).toFixed(2); // Format the price to two decimal places
          optionBlock.selectedOptionQuantity = qty;

        } else {
          // Update selectedOptions with the selected option and its price
          this.selectedOptions[optionBlock.title] = {
            option_type: option.option_type,
            title: option.title,

            price: option.price,
            compare_at_price: option.compare_at_price,
            variant_id: this.extractIdsFromUrl(option.variant_id).variantId,
            quantity: qty,
          };

          let optionPrice = option.price * qty;
          let optionCompareAtPrice = option.compare_at_price * qty;

          // if option type has 'accessories' string
          if(option.option_type.includes('accessories')) {
            // Update the 'accesoriesSelectedOptionPrice' for this option block

            optionBlock.accesoriesSelectedOptionPrice = Number(optionPrice).toFixed(2); // Format the price to two decimal places
            optionBlock.accesoriesSelectedOptionCompareAtPrice = Number(optionCompareAtPrice).toFixed(2); // Format the price to two decimal places
            optionBlock.accesoriesSelectedOptionQuantity = qty;

          } else {
            // Update the 'selectedOptionPrice' for this option block

            optionBlock.selectedOptionPrice = Number(optionPrice).toFixed(2); // Format the price to two decimal places
            optionBlock.selectedOptionCompareAtPrice = Number(optionCompareAtPrice).toFixed(2); // Format the price to two decimal places
            optionBlock.selectedOptionQuantity = qty;
          }
        }
      }

      this.updateGrandTotal();
      this.checkIsMandatory();
      this.hideOptionBlocksErrorMessage(thisOptionTitle);

      console.log('this.selectedOptions', this.selectedOptions)

    },

    computeBundlePrice(bundles, qty) {
      let totalPrice = 0;
      let totalCompareAtPrice = 0;

      bundles.forEach((bundle) => {
        totalPrice += Number(bundle.price) * qty;
        totalCompareAtPrice += Number(bundle.compare_at_price) * qty;
      });
      return {
        totalPrice,
        totalCompareAtPrice,
      };
    },

    insertInitialSliderImages(images, alt = "") {
      const slickSlider = $('#diy-purchase__slider-dynamic');
      const slickMobileSlider = $('#diy-purchase__slider-dynamic--mobile');

      // Create 2 sets of slider elements due to same class name will cover the other one and lead to render failure
      images.map((image) => {
        const desktopSliderElement = this.renderSliderHtml({image: image});
        const mobileSliderElement = this.renderSliderHtml({image: image, postFix: "--mobile"});

        slickSlider.append(desktopSliderElement);
        slickMobileSlider.append(mobileSliderElement);
      });
    },

    changeSliderImages(images) {
      const slickSlider = $('#diy-purchase__slider-dynamic');
      const slickMobileSlider = $('#diy-purchase__slider-dynamic--mobile');

      // Get slides count and remove all existing slides
      const slideCount = slickSlider.slick('getSlick').slideCount;

      for (i = 0; i < slideCount; i++) {
        slickSlider.slick("slickRemove", 0);
        slickMobileSlider.slick("slickRemove", 0);
      }

      // Add current selected option images as slides
      images.forEach((image, alt = "") => {
        const desktopSliderElement = this.renderSliderHtml({image: image});
        const mobileSliderElement = this.renderSliderHtml({image: image, postFix: "--mobile"})

        slickSlider.slick('slickAdd', desktopSliderElement);
        slickMobileSlider.slick('slickAdd', mobileSliderElement);
      });
    },

    // Create slider html element
    renderSliderHtml({image, alt = "", postFix = ""}) {
      const element = document.createElement('div');
      element.innerHTML = `
        <div class="diy-purchase__slider-item${postFix}">\
          <img\
            class="diy-purchase__slider-image"\
            loading="lazy"\
            src="${image}"\
            alt="${alt}"\
            >\
        </div>`;
      return element;
    },

    // Get customize image and place it into customizeImages object
    // Only placing the new array in customizeImage would not change the data in x-data
    // Therefore need to return the data and place this function in @click or @change then manipulate x-data inside the alpine function
    getCustomizeImages(title, image_url) {
      let newCustomizeImages = [...this.customizeImages];

      // If nothing inside customizeImages, get all placeholder image and place them in
      if (this.customizeImages.length === 0) {
        const placeholderImagesArray = this.jsonCustomizeData.map((data) => {
          return ({
            title: data.title,
            image_url: data.default_customize_image_url,
            order: data.customize_image_order
          })
        });
        const selectedItemIndex = placeholderImagesArray.findIndex((item) => item.title === title);
        placeholderImagesArray[selectedItemIndex].image_url = image_url;

        newCustomizeImages = placeholderImagesArray;
      };

      // If there are already data in customizeImages, find the target and replace the image
      const selectedItemIndex = newCustomizeImages.findIndex((item) => item.title === title);
      newCustomizeImages[selectedItemIndex].image_url = image_url;

      this.customizeImages = newCustomizeImages;
      return JSON.parse(JSON.stringify(newCustomizeImages));
    },

    // TODO: Handle no thanks option and replace the current image with placeholder image
    // Replace customize image with placeholder image (image_url in option_blocks -> information object)
    replaceCustomizeImageWithPlaceholderImage(title) {
      // Get the placeholder image from jsonCustomizeData, should be the transparent image
      const placeholderImage = this.jsonCustomizeData.find((data) => {
        return data.title === title
      }).default_customize_image_url;

      const newCustomizeImages = this.getCustomizeImages(title, placeholderImage);
      return newCustomizeImages;
    },

    generateDataCyAttributeName(optionBlock_title, title, isBundle = false) {
      const trimedOptionBlockTitle = optionBlock_title.trim().replaceAll(" ", "-").toLowerCase();
      const trimedTitle = title.trim().replaceAll(" ", "-").toLowerCase();

      return `${isBundle ? "bundle-" : ""}${trimedOptionBlockTitle}-${trimedTitle}`
    },

    showImageViewer() {
      const diyImageStickySection = $(".diy-purchase__sticky-image-section");

      if (diyImageStickySection.hasClass("show")) {
        diyImageStickySection.removeClass("show");
        return;
      };

      diyImageStickySection.addClass("show");
    },

    dataInfos() {
      const dataInfos = document.querySelectorAll('[data-info]');
      dataInfos.forEach(dataInfo => {
        const dataInfoType = dataInfo.getAttribute('data-type');
        const dataInfoTitle = dataInfo.getAttribute('data-title');
        const dataInfoText = dataInfo.getAttribute('data-info');
        const dataInfoImage = dataInfo.getAttribute('data-image');
        let tooltip = document.createElement('div');

        if(dataInfoType == 'image-with-text') {
          tooltip.classList.add('diy-purchase__tooltip');
          tooltip.innerHTML = `
            <div class="diy-purchase__tooltip-box">
              ${dataInfoImage && `<div class="diy-purchase__tooltip-image"><img src="${dataInfoImage}" /></div>`}
              <div class="diy-purchase__tooltip-details">
                ${dataInfoTitle && `<h3 class="diy-purchase__tooltip-title">${dataInfoTitle}</h3>`}
                ${dataInfoText && `<div class="diy-purchase__tooltip-text">${dataInfoText}</div>`}
              </div>
            </div>
          `;
          dataInfo.appendChild(tooltip);
        } else {
          tooltip.classList.add('diy-purchase__tooltip');
          tooltip.innerHTML = dataInfoText;
          dataInfo.appendChild(tooltip);
        }

        // close the tooltip
        function closeTooltip() {
          tooltip.classList.remove('diy-purchase__tooltip--active');
        }

        // on mobile remove mouseenter event and create click event
        function renderTooltip(windowWidth) {

          if(windowWidth < 750) {
            // create on touch
            dataInfo.addEventListener('touchstart', () => {
              tooltip.classList.add('diy-purchase__tooltip--active');

              // append blur div in the body
              const blurBackground = document.createElement('div');
              blurBackground.classList.add('blur-background', 'diy-purchase__tooltip--blur-background');

              const tooltipCloseButton = document.createElement('div');
              tooltipCloseButton.classList.add('tooltip-close-button');

              if(!document.querySelector('.diy-purchase__tooltip--blur-background')) {
                tooltip.after(blurBackground);
                tooltip.append(tooltipCloseButton);

                // add diy-purchase__tooltip-rendered class to body
                document.body.classList.add('diy-purchase__tooltip-rendered');

                // close popup
                setTimeout(() => {
                  function closeTooltipAndRemoveClasses() {
                    closeTooltip();
                    blurBackground.remove();
                    document.body.classList.remove('diy-purchase__tooltip-rendered');
                  }
                  tooltipCloseButton.addEventListener('click', closeTooltipAndRemoveClasses);
                  blurBackground.addEventListener('click', closeTooltipAndRemoveClasses);
                }, 250)
              }

            });
          } else {
            if(document.querySelector('.diy-purchase__tooltip--blur-background')) document.querySelector('.diy-purchase__tooltip--blur-background').remove()
            if(document.querySelector('.diy-purchase__tooltip--active')) document.querySelector('.diy-purchase__tooltip--active').classList.remove('diy-purchase__tooltip--active')

            dataInfo.addEventListener('mouseenter', () => {
              tooltip.classList.add('diy-purchase__tooltip--active');

              // check if it overlap with .diy-footer element then add class to move it up
              const diyFooter = document.querySelector('.diy-footer');
              const diyFooterRect = diyFooter.getBoundingClientRect();
              const tooltipRect = tooltip.getBoundingClientRect();

              if(tooltipRect.top + tooltipRect.height > diyFooterRect.top) {
                tooltip.classList.add('diy-purchase__tooltip--up');
              }
            });

            dataInfo.addEventListener('mouseleave', () => {
              closeTooltip()
              if(document.querySelector('.diy-purchase__tooltip--blur-background')) document.querySelector('.diy-purchase__tooltip--blur-background').remove()
            });
          }
        }

        renderTooltip(window.innerWidth)

        let isRenderToolTip;
        window.onresize = function() {
          clearTimeout(isRenderToolTip);
          isRenderToolTip = setTimeout(function() {
            renderTooltip(window.innerWidth)
          }, 100);
        };

      });
    },

    fetchAttributes() {
      this.diyPageTitle = document.querySelector('[data-diy-purchase-title]') ? document.querySelector('[data-diy-purchase-title]').getAttribute('data-diy-purchase-title') : '';
      this.diyPageBadgeLabel = document.querySelector('[data-diy-purchase-badge-label]') ? document.querySelector('[data-diy-purchase-badge-label]').getAttribute('data-diy-purchase-badge-label') : '';
    },

    scrollIntoView(element) {
      element.addEventListener('transitionend', function handler() {
        let rect = element.getBoundingClientRect();
        if (rect.bottom > window.innerHeight) {
          element.scrollIntoView({ behavior: 'smooth', block: 'end' });
          setTimeout(() => {
            window.scrollBy(0, 100);
          }, 250);
        }
        element.removeEventListener('transitionend', handler);
      });
    },

    scrollToTop() {
      setTimeout(() => {
        let bundleAccordion = document.querySelector('#tab-bundle .diy-purchase__accordion-item--active');
        if(!bundleAccordion) window.scrollTo(0, 0);
      }, 0);
    },

    init() {
      // This code will be executed before Alpine
      // initializes the rest of the component.
      this.initializeData();
      this.insertInitialSliderImages(this.sliderImages);
      this.fetchAttributes();

    },

  }))
})
